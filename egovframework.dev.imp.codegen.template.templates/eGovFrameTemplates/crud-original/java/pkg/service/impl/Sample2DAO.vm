##
#set($voPackage="${voPackage}")
#set($voClassName="${model.entity.pcName}VO")
#set($defaultVoClassName="${model.entity.pcName}DefaultVO")
#set($daoPackage="${daoPackage}")
#set($daoClassName="${model.entity.pcName}DAO")
#set($daoName="${model.entity.ccName}DAO")
#set($daoInstanceName="${model.entity.ccName}DAO")
##
##
#set($insertMethodName="insert${model.entity.pcName}")
#set($updateMethodName="update${model.entity.pcName}")
#set($deleteMethodName="delete${model.entity.pcName}")
#set($selectMethodName="select${model.entity.pcName}")
#set($selectListMethodName="select${model.entity.pcName}List")
#set($selectListTotCntMethodName="select${model.entity.pcName}ListTotCnt")
##
##
#set($insertQueryId="${daoInstanceName}.insert${model.entity.pcName}_S")
#set($updateQueryId="${daoInstanceName}.update${model.entity.pcName}_S")
#set($deleteQueryId="${daoInstanceName}.delete${model.entity.pcName}_S")
#set($selectQueryId="${daoInstanceName}.select${model.entity.pcName}_S")
#set($selectListQueryId="${daoInstanceName}.select${model.entity.pcName}List_D")
#set($selectListTotCntQueryId="${daoInstanceName}.select${model.entity.pcName}ListTotCnt_S")
##
##
package ${daoPackage};

import java.util.List;

import org.springframework.stereotype.Repository;

import egovframework.rte.psl.dataaccess.EgovAbstractDAO;
import ${voPackage}.${voClassName};
import ${voPackage}.${defaultVoClassName};

/**
 * @Class Name : ${daoClassName}.java
 * @Description : ${model.entity.pcName} DAO Class
 * @Modification Information
 *
 * @author ${author}
 * @since ${createDate}
 * @version 1.0
 * @see
 *  
 *  Copyright (C)  All right reserved.
 */

@Repository("${daoName}")
public class ${daoClassName} extends EgovAbstractDAO {

	/**
	 * ${model.entity.name}을 등록한다.
	 * @param vo - 등록할 정보가 담긴 ${voClassName}
	 * @return 등록 결과
	 * @exception Exception
	 */
    public String ${insertMethodName}(${voClassName} vo) throws Exception {
        return (String)insert("${insertQueryId}", vo);
    }

    /**
	 * ${model.entity.name}을 수정한다.
	 * @param vo - 수정할 정보가 담긴 ${voClassName}
	 * @return void형
	 * @exception Exception
	 */
    public void ${updateMethodName}(${voClassName} vo) throws Exception {
        update("${updateQueryId}", vo);
    }

    /**
	 * ${model.entity.name}을 삭제한다.
	 * @param vo - 삭제할 정보가 담긴 ${voClassName}
	 * @return void형 
	 * @exception Exception
	 */
    public void ${deleteMethodName}(${voClassName} vo) throws Exception {
        delete("${deleteQueryId}", vo);
    }

    /**
	 * ${model.entity.name}을 조회한다.
	 * @param vo - 조회할 정보가 담긴 ${voClassName}
	 * @return 조회한 ${model.entity.name}
	 * @exception Exception
	 */
    public ${voClassName} ${selectMethodName}(${voClassName} vo) throws Exception {
        return (${voClassName}) select("${selectQueryId}", vo);
    }

    /**
	 * ${model.entity.name} 목록을 조회한다.
	 * @param searchMap - 조회할 정보가 담긴 Map
	 * @return ${model.entity.name} 목록
	 * @exception Exception
	 */
    public List<?> ${selectListMethodName}(${defaultVoClassName} searchVO) throws Exception {
        return list("${selectListQueryId}", searchVO);
    }

    /**
	 * ${model.entity.name} 총 갯수를 조회한다.
	 * @param searchMap - 조회할 정보가 담긴 Map
	 * @return ${model.entity.name} 총 갯수
	 * @exception
	 */
    public int ${selectListTotCntMethodName}(${defaultVoClassName} searchVO) {
        return (Integer)select("${selectListTotCntQueryId}", searchVO);
    }

}
